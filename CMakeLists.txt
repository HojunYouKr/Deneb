cmake_minimum_required(VERSION 3.10)

#Ex: cmake -D CMAKE_CXX_COMPILER=icpc -D CMAKE_BUILD_TYPE=Release -D BLASLAPACK=IntelMKL .

project(Deneb
	LANGUAGES CXX)

if(UNIX)

# MPI Library
include(FindMPI)
if(NOT MPI_FOUND)
	message(FATAL_ERROR "MPI is not found")
else()
	include_directories(${MPI_INCLUDE_PATH})
	set(EXTRA_LIBS ${EXTRA_LIBS} ${MPI_LIBRARIES})
endif()

# ParMETIS
find_path(PARMETIS_INCLUDE_DIR NAMES parmetis.h PATHS ${PARMETIS_INC})
find_library(PARMETIS_LIBRARY NAMES parmetis.lib libparmetis.a libparmetis.so PATHS ${PARMETIS_LIB})
message(STATUS "PARMETIS_INCLUDE_DIR: ${PARMETIS_INCLUDE_DIR}")
message(STATUS "PARMETIS_LIBRARY: ${PARMETIS_LIBRARY}")
if(NOT PARMETIS_INCLUDE_DIR OR NOT PARMETIS_LIBRARY)
	message(FATAL_ERROR "ParMETIS is not found")
else()
	include_directories(${PARMETIS_INCLUDE_DIR})
	set(EXTRA_LIBS ${EXTRA_LIBS} ${PARMETIS_LIBRARY})
endif()

# METIS (for ParMETIS)
find_path(METIS_INCLUDE_DIR NAMES metis.h PATHS ${METIS_INC})
find_library(METIS_LIBRARY NAMES metis.lib libmetis.a libmetis.so PATHS ${METIS_LIB})
message(STATUS "METIS_INCLUDE_DIR: ${METIS_INCLUDE_DIR}")
message(STATUS "METIS_LIBRARY: ${METIS_LIBRARY}")
if(NOT METIS_INCLUDE_DIR OR NOT METIS_LIBRARY)
	message(FATAL_ERROR "METIS is not found")
else()
	include_directories(${METIS_INCLUDE_DIR})
	set(EXTRA_LIBS ${EXTRA_LIBS} ${METIS_LIBRARY})
endif()

# GKlib (for METIS and ParMETIS)
find_path(GKLIB_INCLUDE_DIR NAMES GKlib.h PATHS ${GKLIB_INC})
message(STATUS "GKLIB_INCLUDE_DIR: ${GKLIB_INCLUDE_DIR}")
if(NOT GKLIB_INCLUDE_DIR)
	message(STATUS "GKlib include directory is not found")
else()
	include_directories(${GKLIB_INCLUDE_DIR})
endif()
find_library(GKLIB_LIBRARY NAMES GKlib.lib libGKlib.a libGKlib.so PATHS ${GKLIB_LIB})
message(STATUS "GKLIB_LIBRARY: ${GKLIB_LIBRARY}")
if(NOT GKLIB_LIBRARY)
	message(STATUS "GKlib library is not found")
else()
	set(EXTRA_LIBS ${EXTRA_LIBS} ${GKLIB_LIBRARY})
endif()

# PETSc
find_path(PETSC_INCLUDE_DIR NAMES petsc.h PATHS ${PETSC_INC})
find_path(PETSC_CONF_INCLUDE_DIR NAMES petscconf.h PATHS ${PETSC_CONF_INC} ${PETSC_INC})
find_library(PETSC_LIBRARY NAMES petsc.lib libpetsc.a libpetsc.so PATHS ${PETSC_LIB})
message(STATUS "PETSC_INCLUDE_DIR: ${PETSC_INCLUDE_DIR}")
message(STATUS "PETSC_CONF_INCLUDE_DIR: ${PETSC_CONF_INCLUDE_DIR}")
message(STATUS "PETSC_LIBRARY: ${PETSC_LIBRARY}")
if(NOT PETSC_INCLUDE_DIR OR NOT PETSC_CONF_INCLUDE_DIR OR NOT PETSC_LIBRARY)
	message(FATAL_ERROR "PETSc is not found")
else()
	include_directories(${PETSC_INCLUDE_DIR})
	include_directories(${PETSC_CONF_INCLUDE_DIR})
	set(EXTRA_LIBS ${EXTRA_LIBS} ${PETSC_LIBRARY})
endif()

# IDEA
find_path(IDEA_INCLUDE_DIR NAMES idea.h PATHS ${IDEA_INC})
find_library(IDEA_LIBRARY NAMES idea.lib libidea.a libidea.so PATHS ${IDEA_LIB})
message(STATUS "IDEA_INCLUDE_DIR: ${IDEA_INCLUDE_DIR}")
message(STATUS "IDEA_LIBRARY: ${IDEA_LIBRARY}")
if(NOT IDEA_INCLUDE_DIR OR NOT IDEA_LIBRARY)
	message(FATAL_ERROR "IDEA is not found")
else()
	include_directories(${IDEA_INCLUDE_DIR})
	set(EXTRA_LIBS ${EXTRA_LIBS} ${IDEA_LIBRARY})
endif()

# BLAS and LAPACK (OpenBLAS or IntelMKL)
if(${BLASLAPACK} STREQUAL OpenBLAS)
	add_compile_definitions(USE_OPENBLAS)
	find_path(OPENBLAS_INCLUDE_DIR NAMES cblas.h PATHS ${OPENBLAS_INC})
	find_library(OPENBLAS_LIBRARY NAMES openblas.lib libopenblas.a libopenblas.so PATHS ${OPENBLAS_LIB})
	message(STATUS "OPENBLAS_INCLUDE_DIR: ${OPENBLAS_INCLUDE_DIR}")
	message(STATUS "OPENBLAS_LIBRARY: ${OPENBLAS_LIBRARY}")
	if(NOT OPENBLAS_INCLUDE_DIR OR NOT OPENBLAS_LIBRARY)
		message(FATAL_ERROR "OpenBLAS is not found")
	else()
		include_directories(${OPENBLAS_INCLUDE_DIR})
		set(EXTRA_LIBS ${EXTRA_LIBS} ${OPENBLAS_LIBRARY})
		set(EXTRA_LIBS ${EXTRA_LIBS} ${OPENBLAS_FC_LIBRARY})
	endif()
elseif(${BLASLAPACK} STREQUAL IntelMKL)
	find_path(INTELMKL_INCLUDE_DIR NAMES mkl.h PATHS ${INTELMKL_INC})
	find_library(INTELMKL_LP64_LIBRARY NAMES libmkl_intel_lp64.so PATHS ${INTELMKL_LIB})
	find_library(INTELMKL_SEQUENTIAL_LIBRARY NAMES libmkl_sequential.so PATHS ${INTELMKL_LIB})
	find_library(INTELMKL_CORE_LIBRARY NAMES libmkl_core.so PATHS ${INTELMKL_LIB})
	message(STATUS "INTELMKL_INCLUDE_DIR: ${INTELMKL_INCLUDE_DIR}")
	message(STATUS "INTELMKL_LP64_LIBRARY: ${INTELMKL_LP64_LIBRARY}")
	message(STATUS "INTELMKL_SEQUENTIAL_LIBRARY: ${INTELMKL_SEQUENTIAL_LIBRARY}")
	message(STATUS "INTELMKL_CORE_LIBRARY: ${INTELMKL_CORE_LIBRARY}")
	if(NOT INTELMKL_INCLUDE_DIR OR NOT INTELMKL_CORE_LIBRARY)
		message(FATAL_ERROR "IntelMKL is not found")
	else()
		include_directories(${INTELMKL_INCLUDE_DIR})
		set(EXTRA_LIBS ${EXTRA_LIBS} ${INTELMKL_LP64_LIBRARY})
		set(EXTRA_LIBS ${EXTRA_LIBS} ${INTELMKL_SEQUENTIAL_LIBRARY})
		set(EXTRA_LIBS ${EXTRA_LIBS} ${INTELMKL_CORE_LIBRARY})
	endif()
else()
	message(FATAL_ERROR "Use OpenBLAS or IntelMKL for BLAS and LAPACK")
endif()

# Compiler
set(CMAKE_CXX_STANDARD 14)
if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)
	set(CMAKE_CXX_FLAGS "-D__int64=\"long\ long\"")
	set(CMAKE_CXX_FLAGS_DEBUG "-O0 -g -Wall -Wextra -Wno-sign-compare -Wno-unused-parameter -fsanitize=address,undefined,float-divide-by-zero,float-cast-overflow -fno-sanitize-recover=all")
	set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL Intel)
    set(CMAKE_CXX_FLAGS "-traceback -fp-model precise")
	if(${BLASLAPACK} STREQUAL OpenBLAS)
	elseif(${BLASLAPACK} STREQUAL IntelMKL)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -qmkl=sequential")
	else()
		message(FATAL_ERROR "Use OpenBLAS or IntelMKL for BLAS and LAPACK")
	endif()
	set(CMAKE_CXX_FLAGS_DEBUG "-O0 -g -w2 -debug full -check=conversions,stack,uninit")
	set(CMAKE_CXX_FLAGS_RELEASE "-O3 -w -DNDEBUG -ip")
else()
	message(FATAL_ERROR "Please use GNU or Intel compiler")
endif()

endif()

include_directories(${CMAKE_SOURCE_DIR}/source/Avocado/inc ${CMAKE_SOURCE_DIR}/source/Deneb/inc)
file(GLOB HEADERS ${CMAKE_SOURCE_DIR}/source/Avocado/inc/* ${CMAKE_SOURCE_DIR}/source/Deneb/inc/*)
file(GLOB SOURCES ${CMAKE_SOURCE_DIR}/source/main.cpp ${CMAKE_SOURCE_DIR}/source/Avocado/src/* ${CMAKE_SOURCE_DIR}/source/Deneb/src/*)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)
add_executable(${PROJECT_NAME} ${HEADERS} ${SOURCES})
target_link_libraries(${PROJECT_NAME} ${EXTRA_LIBS})
